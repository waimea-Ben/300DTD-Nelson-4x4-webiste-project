{#=====================================================
  Base template
  - Used as the basis of all pages
  - Uses a light colour theme by default
  - Provides a main heading and navigation menu
  - Has blocks for the page title and main content
  - Loads PicoCSS and Pico Colours
  - Loads a user stylesheet
  - Loads JS utility functions
  - Includes block for flash messages
=====================================================#}

<!DOCTYPE html>

<html lang="en" data-theme="light">

<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">

    <link rel="icon" href="/static/images/icon.svg">

	<title>{% block title %}{% endblock %}</title>

    <script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js" integrity="sha384-Akqfrbj/HpNVo8k11SXBb6TlBWmXXlYQrCSqEWmyKJe+hDm3Z/B2WVG4smwBkRVm" crossorigin="anonymous"></script>
    <script src="/static/js/utils.js"></script>

	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.classless.slate.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.colors.min.css">
    <link rel="stylesheet" href="/static/css/styles.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
</head>

<body>

    <header>
        <nav>
            <ul>
                <li><strong><a href="/">NSN4x4</a></strong></li>
            </ul>

            <ul>
                {% if session.member_name %}

                    <li>Hello, {{ session.member_name }}</li>

                {% endif %}

                <li><a href="/">Home</a></li>
                <li><a href="/past">Past</a></li>

                

                {% if session.member_id %}
                <li><a href="/upcoming/">Upcoming</a></li>

                {% if session["is_admin"] %}

                    <li><a href="/admin">Admin</a></li>
                    
                {% endif %}

                <li><a href="/logout">Logout</a></li>

                {% else %}

                    <li><a href="/login">Login</a></li>


                {% endif %}

            </ul>
        </nav>
    </header>


    {# Show flash messages from any previous events #}
    {% include "components/messages.jinja" %}


    <main>

        {% block content %}
        {% endblock %}

    </main>


    {# Show debug info. Comment this out if not needed #}
    {% include "components/debug.jinja" %}

    <div id="overlay" 
        style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5);">
      
      <!-- Popup content -->
      <div id="overlay-content" 
          style="background:#fff; margin:50px auto; padding:20px; width:80%; max-height:80%; overflow-y:auto; position:relative;"
      >
        <div id="trip-info"></div>
        <div id="map" style=" height: 400px; width: 100%; border-radius: 8px;"></div>
        
        <!-- X button inside the scrollable content -->
        <div style="text-align:right;">
          <button onclick="closeOverlay()">Close</button>
        </div>
        
        <!-- Trip details will load here -->
      </div>
    </div>

<script>
  let map;

  function openOverlay() {
    document.getElementById("overlay").style.display = "block";
  }

  function closeOverlay() {
    document.getElementById("overlay").style.display = "none";
  }

  document.getElementById("overlay").addEventListener("click", function(e) {
    if (e.target.id === "overlay") {
      closeOverlay();
    }
  });

  const meetingIcon = L.icon({
    iconUrl: '/static/images/meeting-point.png',
    iconSize: [28, 41],
    iconAnchor: [14, 41],
    popupAnchor: [0, -41]
  });

  const tripIcon = L.icon({
    iconUrl: '/static/images/trip-destination.png',
    iconSize: [28, 41],
    iconAnchor: [14, 41],
    popupAnchor: [0, -41]
  });

  async function loadMap(meeting, location) {
    console.log("Loading mapâ€¦");

    // Destroy existing map if present
    if (map) {
      map.remove();
    }

    // Init new map
    map = L.map('map').setView([-41, 174], 6);

    // Base layer
    const osm = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    // Extra layers (example: satellite & terrain)
    const satellite = L.tileLayer('https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
      maxZoom: 20,
      subdomains: ['mt0','mt1','mt2','mt3'],
      attribution: '&copy; Google'
    });

    const terrain = L.tileLayer('https://{s}.google.com/vt/lyrs=p&x={x}&y={y}&z={z}', {
      maxZoom: 20,
      subdomains: ['mt0','mt1','mt2','mt3'],
      attribution: '&copy; Google'
    });

    // Add controls (this is the folding one you wanted)
    L.control.layers(
      { "OpenStreetMap": osm, "Satellite": satellite, "Terrain": terrain },
      {},
      { position: 'topright' }
    ).addTo(map);

    // Scale control
    L.control.scale().addTo(map);

    // Place markers
    const places = [
      { name: "Meeting Point", location: meeting, icon: meetingIcon },
      { name: "Trip Location", location: location, icon: tripIcon }
    ];

    const bounds = [];

    for (let place of places) {
      try {
        const res = await fetch(`https://nominatim.openstreetmap.org/search?format=json&countrycodes=nz&q=${encodeURIComponent(place.location)}`, {
          headers: { 'User-Agent': 'YourAppName/1.0 (your@email.com)' }
        });
        const data = await res.json();

        if (data && data.length > 0) {
          const lat = parseFloat(data[0].lat);
          const lon = parseFloat(data[0].lon);

          L.marker([lat, lon], { icon: place.icon }).addTo(map)
            .bindPopup(`<b>${place.name}</b><br>${place.location}`);

          bounds.push([lat, lon]);
        }
      } catch (err) {
        console.error("Geocoding failed for", place.location, err);
      }
    }

    if (bounds.length > 0) {
      map.fitBounds(bounds, { padding: [50, 50] });
    }
  }
</script>



</body>

</html>


